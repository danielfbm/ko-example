pipeline {
  agent {
    kubernetes {
      //cloud 'kubernetes'
      yaml '''
kind: Pod
metadata:
  name: ko
spec:
  containers:
  - name: jnlp
    image: index.alauda.cn/alaudaorg/jnlp-slave:latest
    imagePullPolicy: Always
    workingDir: /home/jenkins/agent
    env:
    - name: JENKINS_URL
      value: http://jenkins.default:8080
    - name: "JENKINS_TUNNEL"
      value: "jenkins-agent.default:50000"
    volumeMounts:
      - mountPath: "/home/jenkins/agent"
        name: "workspace-volume"
        readOnly: false
  - name: ko
    image: index.alauda.cn/alaudak8s/ko:latest
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    workingDir: "/home/jenkins/agent"
    volumeMounts:
      - mountPath: "/home/jenkins/agent"
        name: "workspace-volume"
        readOnly: false
  volumes:
    - emptyDir:
      medium: ""
      name: "workspace-volume"
'''
    }
  }
  stages {
    stage("Clone"){
        steps{
            git url:"https://github.com/danielfbm/ko-example.git"
        }
    }
    stage('Build') {
        environment {
                KO_DOCKER_REPO = "jfrog-demo.alauda.cn/docker"
            }
      steps {
          script{
              container('ko') {

                withCredentials([usernamePassword(credentialsId: 'daniel-jfrog', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                    def authBase = sh script:"echo ${USER}:${PASS} | base64", returnStdout: true
                    sh "docker login $KO_DOCKER_REPO -u ${USER} -p ${PASS}"
                }
                sh script: "ko publish github.com/danielfbm/ko-example", label:"ko publish github.com/danielfbm/ko-example"
              }
          }
      }
    }
  }
}